<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sidey</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-08-31T00:38:59+01:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>What is Happening With my Block?</title>
   <link href="http://localhost:4000/2020/08/30/what-is-happening-with-my-block"/>
   <updated>2020-08-30T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/08/30/what-is-happening-with-my-block</id>
   <content type="html">&lt;p&gt;Do you know which tests are going to pass and which tests are going to fail in this test file?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;minitest/autorun&quot;

class TestBlocks &amp;lt; Minitest::Test
  def setup
    @values = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
  end
  
  def test_passing_a_block_with_do
    assert @values.all? do |value|
      false
    end
  end
  
  def test_passing_a_block_with_do_surround_by_parentheses
    assert(@values.all? do |value|
      false
    end)
  end
  
  def test_passing_a_block_with_braces
    assert @values.all? { |value| false }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How do you do in your code base? If you do like in &lt;code&gt;test_passing_a_block_with_do&lt;/code&gt; it is bad news.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test_passing_a_block_with_do&lt;/code&gt; is the only one which is going to pass, but why? I know you know, &lt;code&gt;assert&lt;/code&gt; receives &lt;code&gt;@values.all? do |value|&lt;/code&gt; as a block, then it thinks this block is true and that’s it. If you thought that, you’re almost right. Let’s see what is &lt;code&gt;assert&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# https://github.com/seattlerb/minitest/blob/6257210b7accfeb218b4388aaa36d3d45c5c41a5/lib/minitest/assertions.rb#L178
def assert test, msg = nil
  self.assertions += 1
  unless test then
    msg ||= &quot;Expected #{mu_pp test} to be truthy.&quot;
    msg = msg.call if Proc === msg
    raise Minitest::Assertion, msg
  end
  true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, is &lt;code&gt;test&lt;/code&gt; a &lt;code&gt;Proc&lt;/code&gt;? What do you think?&lt;/p&gt;

&lt;p&gt;After debugging this method I know that &lt;code&gt;test&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Why is it &lt;code&gt;true&lt;/code&gt;? The class is &lt;code&gt;TrueClass&lt;/code&gt;, so it is a proper &lt;code&gt;true&lt;/code&gt;. What is happening here?&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;msg&lt;/code&gt; then? &lt;code&gt;msg&lt;/code&gt; is the &lt;code&gt;Proc&lt;/code&gt; then, right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;(byebug) msg
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;msg&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. Okay, it got the default value. Where is my block then? Well, there is only one place left now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;(byebug) yield
false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, &lt;code&gt;false&lt;/code&gt;. The block I’m passing is returning &lt;code&gt;false&lt;/code&gt;, is that the reason? If I change to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def test_passing_a_block_with_do
  assert @values.all? do |value|
    &quot;hello, world!&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;(byebug) yield
&quot;hello, world!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahhhh, that was it.&lt;/p&gt;

&lt;p&gt;A mindful programmer would figure that out at first saw, there is no reason to think that the whole &lt;code&gt;collection.all? do...end&lt;/code&gt; is going to be a single argument. However, I think it’s pretty easy to miss that, have you got it at first glance?&lt;/p&gt;
</content>
 </entry>
 

</feed>
